{"name":"Mockservice","tagline":"mockservice in js","body":"mockservice [![NPM version](https://badge.fury.io/js/mockservice.png)](https://npmjs.org/package/mockservice) [![Dependencies Status](https://david-dm.org/linkwisdom/mockservice.png)](https://david-dm.org/linkwisdom/mockservice)\r\n\r\n===========\r\n\r\n> 构造数据服务\r\n\r\n---------------------------\r\n\r\n## 安装与配置\r\n\r\n\r\n### 选择npm安装\r\n\r\n> npm install mockservice\r\n\r\n### gitub安装 (需要支持git协议)\r\n\r\n> npm install git://github.com/fcfe/mockservice.git\r\n\r\n### 配置edp服务器 \r\n\r\n/// (如果开发依赖不是是edp环境，绕道[mock-cli](#mock-cli))\r\n\r\n> 配置方法: 在edp-webserver-config文件中添加如下代码\r\n\r\n```js\r\n    exports.port = 8848;\r\n\r\n    var ms = require('mockservice');\r\n    ms.config({\r\n        // dir 相当于定义了mock的basedir 及require的baseUrl\r\n        dir: __dirname + '/phoenix/debug'\r\n    });\r\n\r\n    // edp 通过getLocations 路由请求处理器\r\n    exports.getLocations = function () {\r\n        return [\r\n            { // 将特定请求转向代理\r\n                location: /path=GET\\/nikon/,\r\n                handler: ms.proxy({\r\n                        replace: { // 对url的替换规则\r\n                            source: '/nirvana-workspace',\r\n                            target: ''\r\n                        },\r\n                        host: 'dev.liandong.org',\r\n                        port: 8848\r\n                    });\r\n            },\r\n            { // 其它请求转为本地mock\r\n                location: /^\\/request.ajax/, \r\n                handler: ms.request()\r\n            }\r\n        ];\r\n    };\r\n```\r\n\r\n### 多个项目模块的配置\r\n\r\n- 传入config为数组\r\n\r\n```js\r\n    ms.config([\r\n        {\r\n            dir: './response',\r\n            logError: {\r\n                logFile: 'ms-error-log'\r\n            }\r\n        },\r\n        {\r\n            dir: './debug'\r\n        }\r\n    ]);\r\n```\r\n\r\n- 多次config\r\n```js\r\n    ms.config({\r\n        dir: './response',\r\n        packages: {\r\n            'lib': './service'\r\n        }\r\n    });\r\n\r\n    ms.config({\r\n        dir: './debug',\r\n        packages: {\r\n            'service': './service'\r\n        }\r\n    });\r\n```\r\n\r\n- 配置说明\r\n\r\n1. 每个模块的配置独立可以有分别的dir和packages配置\r\n2. `packages`不同模块可以共享，因此不可命名冲突\r\n3. 多次`logError`配置只有最后一次有效\r\n4. 建议`packages`、`cache`、`pathRegs`的配置分别写到项目模块配置文件`ms-config.js`文件中\r\n\r\n- 启动服务器\r\n\r\n> edp ws start\r\n\r\n- 使用edp时建议mocksrvice安装在项目代码上一级目录, 如`F://fengchao/node_modules`\r\n\r\n### mock-cli\r\n\r\n- 如使用独立服务器; 需要全局安装 `npm install mocksrvice -g`; \r\n\r\n    // 进入工作路径\r\n    cd workspace\r\n    \r\n    // 启动mock服务器\r\n    mock 8848\r\n\r\n### ms-config.js配置\r\n\r\n> ms-config.js 文件是可选文件，配置是为了使用更方便\r\n> ms-config.js 文件可以放到目标文件夹下；只影响当前文件夹或子文件夹下的模块\r\n\r\n> 详细配置参考 [config 详细说明](https://github.com/linkwisdom/mockservice/blob/master/docs/config.md);\r\n\r\n```js\r\n    module.exports = {\r\n        // mock接口文件是否缓存\r\n        cache: false,\r\n        \r\n        // 接口匹配规则\r\n        pathRegs: [/\\w+_\\w+/, 'scookie', 'zebra'],\r\n        \r\n        // 以下配置只在baseDir中有效\r\n        // packages 定义了基于basedir的寻址方式\r\n        packages: {\r\n            'lib': './lib',\r\n            'tpl': './template'\r\n        },\r\n        // 如果不写logError，则错误信息不显示输出\r\n        logError: {\r\n            // 如果不指定logFile，则将错误信息输出到控制台\r\n            logFile: 'ms-erorr.log'\r\n        }\r\n    };\r\n```\r\n\r\n----------------------------\r\n\r\n### 使用说明\r\n\r\n > 启动程序后ms自动扫描目录下所有index.js文件及符合特定规则的文件（如果需要，规则可由ms-config.js文件配置）;\r\n \r\n > mock文件不会立即加载；只有请求触发时会加载；且不进行缓存；\r\n \r\n > 测试：启动edp或mock程序；浏览器中测试，或发curl请求\r\n \r\n     http://localhost:8848/request.ajax?path=GET/auth&param={}\r\n     \r\n-----------------------\r\n\r\n## 构造mock数据规范\r\n\r\n- 请求规范\r\n\r\n> 以下规范为默认的请求规范，如果不符合，可自定义getContext方法获取`path`、`param`和`Context`对象\r\n\r\n> 前端代码发送真实请求；请求路径符合request.ajax?path=XXX形式;\r\n> 参数param可以是POST或GET参数\r\nparam符合严格规范的json格式\r\n\r\n- 构造数据代码规范\r\n\r\n> 所有响应request.ajax?path={pathname}&param={object}请求每个pathname对应一个mock文件；\r\n\r\n> mock文件名`/`替换为`_`；\r\n\r\n> 独立mock文件命名为{pkgname}/{pathname}.js;\r\n\r\n-- 对应每个接口应该指定一个响应函数；响应函数有固定参数列表(path, param, context)\r\n\r\n-- index.js 文件可以定义多个接口的响应函数 (但是不建议写到index文件)\r\n\r\n-- {pathname}.js 文件只能定义对应pathname的响应函数\r\n\r\n————————————————————————\r\n\r\n## mock文件示例\r\n\r\n```js\r\n// mock 的用法参考./test的文件\r\n\r\n/**\r\n * 参数说明\r\n *\r\n * @param  {string} path    路由路径\r\n * @param  {Object} param   请求参数\r\n * @param  {HttpRequest} context.request\r\n * @param  {HttpResponse} context.response\r\n * @param  {function({array|object})} context.setCookie\r\n * @param  {function} context.update 更新服务\r\n */\r\nmodule.exports = function (path, param, context) {\r\n\r\n    // tpl在packages定义了路径\r\n    var tpl = require('tpl/hospital');\r\n    \r\n    // lib/mendb是基于menset概念设计(未完全实现）\r\n    var db = require('lib/mendb');\r\n    \r\n    /**\r\n     * \r\n     * moment, random, template 为支持mockservice内置的组件\r\n     */\r\n    var moment = require('moment');  // 时间格式化组件\r\n    var random = require('random');  // 随机数据产生器\r\n    var template = require('template'); // 基于etpl的模板解析引擎 \r\n    \r\n    /**\r\n     * 因为采用的是menset设计，因此直接赋值相当于改变了数据集\r\n     * db 支持数据集的增删改查\r\n     */\r\n    var hospital = db.hospital.find({id: param.hospitalId})[0];\r\n    // 修改hospital的访问量\r\n    hospital.visitCount++;\r\n    \r\n    // 业务数据\r\n    var data = {\r\n        timestamp: random.timestamp(),\r\n        title: tpl.title(hospital),\r\n        creative: tpl.creative({\r\n            id: hospital.id,\r\n            name: hospital.name,\r\n            city: random.words(hospital.cities), // 随机选择国内城市\r\n            section: random.words(hospital.sections) // 随机选择医院科室\r\n        })\r\n     };\r\n    \r\n    // 返回数据\r\n    return {\r\n        status: 200, // 业务status，与http状态无关\r\n        _status: 300, // 指定http状态； 不输出\r\n        _timeout: 1000, // 延迟发送毫秒时间；不输出\r\n        data: data\r\n    };\r\n};\r\n\r\n// 注意db相关的功能尚在完善与测试中；暂不要在业务中使用\r\n// 以上代码参考 test/response/GET_hospital.js\r\n```\r\n\r\n## 扩展modules 说明\r\n> 扩展的modules是为了更好的支持mock数据的生成；\r\n\r\n> 所有的modules通过require(modulename)既可以获取到；\r\n\r\n> 从v0.1.12开始停止使用include; 全部使用require方式获取组件；\r\n\r\n> mockservice; 内置了以下通用mock支持组件\r\n\r\n- random : 产生随机数据 \r\n> [random 说明文档](https://github.com/linkwisdom/mockservice/blob/master/docs/random.md)\r\n\r\n- storage : 数据增删改查操作支持\r\n> [storage 说明文档](https://github.com/linkwisdom/mockservice/blob/master/docs/storage.md)\r\n\r\n- template : 采用的是etpl解析引擎，方便模板化产生数据\r\n> [template 说明文档](https://github.com/linkwisdom/mockservice/blob/master/docs/template.md)\r\n\r\n- moment : 基于moment.js时间格式化组件（无多国语言包）\r\n> [moment 中文](http://momentjs.cn/docs/)\r\n\r\n------------------------\r\n\r\n### 调试\r\n\r\n- 在执行参数列表中出现 `--debug` 字段，即可进入调试模式；\r\n- 为方便调试，建议安装node-inspector；即 `npm install node-inspector -g`\r\n\r\n```bash\r\n    \r\n    # edp 环境调试\r\n    edp ws start --debug\r\n```\r\n\r\n\r\n### 支持`REST-style`的AJAX\r\n\r\n- 参考test/service/ 配置\r\n- 增加`baseDir`配置，path基于baseDir产生\r\n\r\n```js\r\n    {\r\n        baseDir: __dirname,\r\n\r\n        // 接口名匹配规则\r\n        pathRegs: [ /(ADD|GET|SET|DEL)\\/\\w+/],\r\n\r\n        // 包路径配置\r\n        packages: {\r\n            database: './database',\r\n        }\r\n    }\r\n```\r\n\r\n#### mock参数问题\r\n\r\n- 为实现动态构造数据，需要获得两个关键参数`path`和`param`\r\n- path 表示ws名称，可以通过请求路径`pathname`或者请求参数`path`字段匹配\r\n- param 表示提交的业务关注的请求参数，自动按优先级顺序从参数列表中获取\r\n\r\n***path的参数产生规则***\r\n\r\n```js\r\n    context.path = ( post && post.path ) || (query && query.path) || `pathname - baseDir`\r\n```\r\n\r\n\r\n***param参数产生的逻辑如下***\r\n\r\n```js\r\n\r\n context.param = ( post && post.param || post ) || (query && query.param || query )\r\n \r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}